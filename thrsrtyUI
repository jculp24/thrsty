import React, { useState } from 'react';
import { ArrowRight, ArrowLeft, MapPin, Clock, ShoppingCart, User, Home, Search, History, X, Plus, Minus, Star } from 'lucide-react';

// Main app component that showcases various screens
const ThrstyApp = () => {
  const [currentScreen, setCurrentScreen] = useState('home');
  const [selectedVendor, setSelectedVendor] = useState(null);
  const [cartItems, setCartItems] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  
  // Navigation handler
  const navigateTo = (screen, vendor = null) => {
    setCurrentScreen(screen);
    if (vendor) setSelectedVendor(vendor);
  };
  
  // Add item to cart
  const addToCart = (item) => {
    // Store vendor info with the item for pickup location
    const itemWithVendor = {
      ...item,
      vendorId: selectedVendor?.id,
      vendorName: selectedVendor?.name,
      vendorLocation: selectedVendor?.location
    };
    
    const existingItem = cartItems.find(i => i.id === item.id);
    if (existingItem) {
      setCartItems(cartItems.map(i => 
        i.id === item.id ? {...i, quantity: i.quantity + 1} : i
      ));
    } else {
      setCartItems([...cartItems, {...itemWithVendor, quantity: 1}]);
    }
  };
  
  // Update item quantity in cart
  const updateQuantity = (id, change) => {
    const updatedCart = cartItems.map(item => 
      item.id === id ? {...item, quantity: Math.max(0, item.quantity + change)} : item
    ).filter(item => item.quantity > 0);
    
    setCartItems(updatedCart);
  };
  
  // Render the appropriate screen
  const renderScreen = () => {
    switch(currentScreen) {
      case 'home':
        return <HomeScreen navigateTo={navigateTo} />;
      case 'vendor':
        return <VendorScreen vendor={selectedVendor} navigateTo={navigateTo} addToCart={addToCart} />;
      case 'cart':
        return <CartScreen cartItems={cartItems} updateQuantity={updateQuantity} navigateTo={navigateTo} />;
      case 'order':
        return <OrderScreen navigateTo={navigateTo} />;
      default:
        return <HomeScreen navigateTo={navigateTo} />;
    }
  };
  
  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* App content */}
      <div className="flex-1 overflow-y-auto">
        {renderScreen()}
      </div>
      
      {/* Bottom navigation */}
      <div className="bg-white border-t border-gray-200 py-2">
        <div className="flex justify-around items-center">
          <button 
            className={`flex flex-col items-center p-2 ${currentScreen === 'home' ? 'text-blue-600' : 'text-gray-500'}`} 
            onClick={() => navigateTo('home')}
          >
            <Home size={24} />
            <span className="text-xs mt-1">Home</span>
          </button>
          
          <button 
            className={`flex flex-col items-center p-2 ${currentScreen === 'cart' ? 'text-blue-600' : 'text-gray-500'}`}
            onClick={() => navigateTo('cart')}
          >
            <div className="relative">
              <ShoppingCart size={24} />
              {cartItems.length > 0 && (
                <div className="absolute -top-2 -right-2 bg-red-500 text-white text-xs w-5 h-5 flex items-center justify-center rounded-full">
                  {cartItems.reduce((sum, item) => sum + item.quantity, 0)}
                </div>
              )}
            </div>
            <span className="text-xs mt-1">Cart</span>
          </button>
          
          <button 
            className={`flex flex-col items-center p-2 ${currentScreen === 'history' ? 'text-blue-600' : 'text-gray-500'}`}
            onClick={() => navigateTo('history')}
          >
            <History size={24} />
            <span className="text-xs mt-1">Orders</span>
          </button>
          
          <button 
            className={`flex flex-col items-center p-2 ${currentScreen === 'profile' ? 'text-blue-600' : 'text-gray-500'}`}
            onClick={() => navigateTo('profile')}
          >
            <User size={24} />
            <span className="text-xs mt-1">Profile</span>
          </button>
        </div>
      </div>
    </div>
  );
};

// Home Screen Component
const HomeScreen = ({ navigateTo, searchQuery, setSearchQuery }) => {
  const vendors = [
    {
      id: 1, 
      name: 'CityCenter Freestyle', 
      image: '/api/placeholder/80/80',
      rating: 4.8,
      distance: '0.3 mi',
      featured: true,
      category: 'Coca-Cola Freestyle',
      location: '233 Main Street'
    },
    {
      id: 2, 
      name: 'University Spire', 
      image: '/api/placeholder/80/80',
      rating: 4.6,
      distance: '0.5 mi',
      featured: true,
      category: 'Pepsi Spire',
      location: '500 College Ave'
    },
    {
      id: 3, 
      name: 'Downtown Fountain', 
      image: '/api/placeholder/80/80',
      rating: 4.5,
      distance: '0.7 mi',
      featured: false,
      category: 'Classic Soda Fountain',
      location: '55 Park Plaza'
    },
    {
      id: 4, 
      name: 'Tech Hub Beverages', 
      image: '/api/placeholder/80/80',
      rating: 4.7,
      distance: '1.1 mi',
      featured: false,
      category: 'Coca-Cola Freestyle',
      location: '780 Innovation Drive'
    },
  ];
  
  const categories = [
    { id: 1, name: 'Cola', icon: 'ü•§' },
    { id: 2, name: 'Diet Cola', icon: 'ü•§' },
    { id: 3, name: 'Flavored', icon: 'üçã' },
    { id: 4, name: 'Lemon-Lime', icon: 'üçà' },
    { id: 5, name: 'Root Beer', icon: 'üç∫' },
  ];
  
  return (
    <div className="pb-4">
      {/* Header */}
      <div className="bg-blue-600 text-white p-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold">THRSTY</h1>
            <div className="flex items-center mt-1">
              <MapPin size={16} />
              <span className="ml-1 text-sm">Current Location</span>
            </div>
          </div>
          <div className="bg-blue-500 p-2 rounded-full">
            <User size={24} />
          </div>
        </div>
        
        {/* Search bar */}
        <div className="mt-4 bg-white rounded-full flex items-center px-4 py-2 text-gray-700">
          <Search size={20} className="text-gray-400" />
          <input 
            type="text" 
            placeholder="Search for drinks or vendors..." 
            className="ml-2 flex-1 outline-none bg-transparent"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>
      
      {/* Categories */}
      <div className="px-4 py-3">
        <h2 className="text-lg font-semibold mb-3">Categories</h2>
        <div className="flex overflow-x-auto pb-2 -mx-1">
          {categories.map(category => (
            <div key={category.id} className="flex flex-col items-center mx-2 min-w-fit">
              <div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center text-2xl">
                {category.icon}
              </div>
              <span className="mt-1 text-xs text-center">{category.name}</span>
            </div>
          ))}
        </div>
      </div>
      
      {/* Featured Vendors */}
      <div className="px-4 mt-2">
        <div className="flex justify-between items-center mb-3">
          <h2 className="text-lg font-semibold">Featured Vendors</h2>
          <button className="text-blue-600 text-sm flex items-center">
            View All <ArrowRight size={16} className="ml-1" />
          </button>
        </div>
        
        {vendors.filter(v => v.featured).map(vendor => (
          <div 
            key={vendor.id}
            className="bg-white rounded-lg shadow mb-3 p-3 flex"
            onClick={() => navigateTo('vendor', vendor)}
          >
            <img 
              src={vendor.image} 
              alt={vendor.name} 
              className="w-20 h-20 rounded-lg object-cover"
            />
            <div className="ml-3 flex-1">
              <div className="flex justify-between">
                <h3 className="font-bold">{vendor.name}</h3>
                <div className="flex items-center text-yellow-500">
                  <Star size={16} fill="currentColor" />
                  <span className="ml-1 text-sm text-gray-700">{vendor.rating}</span>
                </div>
              </div>
              <p className="text-sm text-gray-500">{vendor.category}</p>
              <div className="flex items-center mt-2 text-sm text-gray-500">
                <MapPin size={14} />
                <span className="ml-1">{vendor.distance}</span>
                <div className="bg-blue-100 text-blue-800 ml-2 px-2 py-0.5 rounded-full text-xs">
                  Free Delivery
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {/* Nearby Vendors */}
      <div className="px-4 mt-4">
        <h2 className="text-lg font-semibold mb-3">Nearby Vendors</h2>
        
        {vendors.map(vendor => (
          <div 
            key={vendor.id}
            className="bg-white rounded-lg shadow mb-3 p-3 flex"
            onClick={() => navigateTo('vendor', vendor)}
          >
            <img 
              src={vendor.image} 
              alt={vendor.name} 
              className="w-16 h-16 rounded-lg object-cover"
            />
            <div className="ml-3 flex-1">
              <div className="flex justify-between">
                <h3 className="font-semibold">{vendor.name}</h3>
                <div className="flex items-center text-yellow-500">
                  <Star size={14} fill="currentColor" />
                  <span className="ml-1 text-sm text-gray-700">{vendor.rating}</span>
                </div>
              </div>
              <p className="text-xs text-gray-500">{vendor.category}</p>
              <div className="flex items-center mt-1 text-xs text-gray-500">
                <MapPin size={12} />
                <span className="ml-1">{vendor.distance}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Vendor Screen Component
const VendorScreen = ({ vendor, navigateTo, addToCart }) => {
  const [activeCategory, setActiveCategory] = useState('Popular');
  
  // Sample menu categories
  const categories = ['Popular', 'Signature', 'Classics', 'Seasonal', 'Specials'];
  
  // Sample menu items based on soda fountain/freestyle machines
  const menuItems = [
    { 
      id: 1, 
      name: 'Cherry Vanilla Coke', 
      description: 'Classic Coca-Cola with cherry and vanilla flavoring',
      price: 2.49, 
      image: '/api/placeholder/80/80',
      category: 'Popular'
    },
    { 
      id: 2, 
      name: 'Strawberry Sprite', 
      description: 'Crisp lemon-lime Sprite with a hint of strawberry',
      price: 2.49, 
      image: '/api/placeholder/80/80',
      category: 'Popular'
    },
    { 
      id: 3, 
      name: 'Orange Vanilla Coke', 
      description: 'Coca-Cola with a refreshing blend of orange and vanilla',
      price: 2.49, 
      image: '/api/placeholder/80/80',
      category: 'Signature'
    },
    { 
      id: 4, 
      name: 'Raspberry Fanta', 
      description: 'Bubbly Fanta orange with sweet raspberry flavor',
      price: 2.49, 
      image: '/api/placeholder/80/80',
      category: 'Classics'
    },
    { 
      id: 5, 
      name: 'Peach Mello Yello', 
      description: 'Citrus Mello Yello with a smooth peach finish',
      price: 2.49, 
      image: '/api/placeholder/80/80',
      category: 'Seasonal'
    },
    { 
      id: 6, 
      name: 'Diet Coke with Lime', 
      description: 'Zero-calorie Diet Coke with a zesty lime twist',
      price: 2.49, 
      image: '/api/placeholder/80/80',
      category: 'Popular'
    },
    { 
      id: 7, 
      name: 'Mountain Dew Code Red', 
      description: 'Cherry flavored Mountain Dew with an extra kick',
      price: 2.49, 
      image: '/api/placeholder/80/80',
      category: 'Signature'
    },
  ];
  
  // Filter menu items by active category
  const filteredItems = activeCategory === 'All' 
    ? menuItems 
    : menuItems.filter(item => item.category === activeCategory);
  
  return (
    <div className="pb-4">
      {/* Vendor header */}
      <div className="relative">
        <div className="h-48 bg-gray-300">
          <img 
            src="/api/placeholder/400/200" 
            alt={vendor?.name} 
            className="w-full h-full object-cover"
          />
        </div>
        
        <button 
          className="absolute top-4 left-4 bg-white rounded-full p-2" 
          onClick={() => navigateTo('home')}
        >
          <ArrowLeft size={20} />
        </button>
        
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-4">
          <h1 className="text-white text-2xl font-bold">{vendor?.name}</h1>
        </div>
      </div>
      
      {/* Vendor info */}
      <div className="bg-white p-4">
        <div className="flex justify-between items-center">
          <div className="flex items-center text-yellow-500">
            <Star size={20} fill="currentColor" />
            <span className="ml-1 text-lg text-gray-700">{vendor?.rating}</span>
            <span className="ml-1 text-sm text-gray-500">(200+ ratings)</span>
          </div>
          <div className="flex items-center text-gray-500">
            <MapPin size={16} />
            <span className="ml-1">{vendor?.distance}</span>
          </div>
        </div>
        
        <p className="mt-2 text-gray-600">
          Specializing in {vendor?.category.toLowerCase()} with a focus on quality ingredients and innovative flavors.
        </p>
        
        <div className="flex mt-3 space-x-2">
          <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
            Free Delivery
          </div>
          <div className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
            20-30 min
          </div>
        </div>
      </div>
      
      {/* Menu categories */}
      <div className="mt-2 px-4">
        <h2 className="text-lg font-semibold mb-3">Menu</h2>
        <div className="flex overflow-x-auto space-x-2 pb-2">
          {categories.map(category => (
            <button 
              key={category}
              className={`px-4 py-2 rounded-full whitespace-nowrap ${
                activeCategory === category 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-100 text-gray-700'
              }`}
              onClick={() => setActiveCategory(category)}
            >
              {category}
            </button>
          ))}
        </div>
      </div>
      
      {/* Menu items */}
      <div className="px-4 mt-2">
        {filteredItems.map(item => (
          <div key={item.id} className="bg-white rounded-lg shadow mb-3 p-3">
            <div className="flex">
              <img 
                src={item.image} 
                alt={item.name} 
                className="w-20 h-20 rounded-lg object-cover"
              />
              <div className="ml-3 flex-1">
                <h3 className="font-semibold">{item.name}</h3>
                <p className="text-sm text-gray-500 line-clamp-2">{item.description}</p>
                <div className="flex justify-between items-center mt-2">
                  <span className="font-bold">${item.price.toFixed(2)}</span>
                  <button 
                    className="bg-blue-600 text-white px-3 py-1 rounded-full text-sm"
                    onClick={() => addToCart(item)}
                  >
                    Add to Cart
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Cart Screen Component
const CartScreen = ({ cartItems, updateQuantity, navigateTo }) => {
  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const tax = subtotal * 0.085;
  const total = subtotal + tax;
  
  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="bg-white p-4 border-b border-gray-200">
        <div className="flex items-center">
          <button onClick={() => navigateTo('home')}>
            <ArrowLeft size={24} />
          </button>
          <h1 className="text-xl font-bold ml-4">Your Cart</h1>
        </div>
      </div>
      
      {cartItems.length === 0 ? (
        <div className="flex-1 flex flex-col items-center justify-center p-4 text-center">
          <ShoppingCart size={64} className="text-gray-300 mb-4" />
          <h2 className="text-xl font-semibold mb-2">Your cart is empty</h2>
          <p className="text-gray-500 mb-4">Looks like you haven't added any drinks to your cart yet</p>
          <button 
            className="bg-blue-600 text-white px-6 py-2 rounded-full"
            onClick={() => navigateTo('home')}
          >
            Browse Vendors
          </button>
        </div>
      ) : (
        <>
          {/* Cart items */}
          <div className="flex-1 overflow-y-auto p-4">
            {cartItems.map(item => (
              <div key={item.id} className="bg-white rounded-lg shadow mb-3 p-3">
                <div className="flex">
                  <img 
                    src={item.image} 
                    alt={item.name} 
                    className="w-16 h-16 rounded-lg object-cover"
                  />
                  <div className="ml-3 flex-1">
                    <div className="flex justify-between">
                      <h3 className="font-semibold">{item.name}</h3>
                      <button onClick={() => updateQuantity(item.id, -item.quantity)}>
                        <X size={18} className="text-gray-400" />
                      </button>
                    </div>
                    <div className="flex justify-between items-center mt-2">
                      <span className="font-bold">${(item.price * item.quantity).toFixed(2)}</span>
                      <div className="flex items-center">
                        <button 
                          className="bg-gray-200 rounded-full w-7 h-7 flex items-center justify-center"
                          onClick={() => updateQuantity(item.id, -1)}
                        >
                          <Minus size={16} />
                        </button>
                        <span className="mx-3">{item.quantity}</span>
                        <button 
                          className="bg-gray-200 rounded-full w-7 h-7 flex items-center justify-center"
                          onClick={() => updateQuantity(item.id, 1)}
                        >
                          <Plus size={16} />
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {/* Pickup Location */}
            <div className="bg-white rounded-lg shadow mb-3 p-4">
              <h3 className="font-semibold mb-2">Pickup Location</h3>
              <div className="flex items-start">
                <MapPin size={20} className="text-blue-600 mt-1" />
                <div className="ml-2">
                  {cartItems.length > 0 ? (
                    <>
                      <p className="font-medium">{cartItems[0].vendorName}</p>
                      <p className="text-sm text-gray-500">{cartItems[0].vendorLocation}</p>
                    </>
                  ) : (
                    <p className="font-medium">No location selected</p>
                  )}
                </div>
              </div>
            </div>
            
            {/* Payment method */}
            <div className="bg-white rounded-lg shadow mb-3 p-4">
              <h3 className="font-semibold mb-2">Payment Method</h3>
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="bg-blue-100 rounded-lg p-2">
                    {/* Credit card icon placeholder */}
                    <div className="w-6 h-6 bg-blue-600 rounded"></div>
                  </div>
                  <div className="ml-2">
                    <p className="font-medium">‚Ä¢‚Ä¢‚Ä¢‚Ä¢ 4242</p>
                    <p className="text-xs text-gray-500">Expires 12/25</p>
                  </div>
                </div>
                <button className="text-blue-600 text-sm">Change</button>
              </div>
            </div>
          </div>
          
          {/* Order summary */}
          <div className="bg-white p-4 border-t border-gray-200">
            <div className="space-y-2 mb-4">
              <div className="flex justify-between">
                <span className="text-gray-500">Subtotal</span>
                <span>${subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Pickup Time</span>
                <span>15-20 min</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Tax</span>
                <span>${tax.toFixed(2)}</span>
              </div>
              <div className="flex justify-between font-bold text-lg">
                <span>Total</span>
                <span>${total.toFixed(2)}</span>
              </div>
            </div>
            <button 
              className="w-full bg-blue-600 text-white py-3 rounded-lg font-bold"
              onClick={() => navigateTo('order')}
            >
              Place Order
            </button>
          </div>
        </>
      )}
    </div>
  );
};

// Order Status Screen Component
const OrderScreen = ({ navigateTo }) => {
  // Sample order data
  const order = {
    id: 'ORD1234567',
    status: 'Preparing',
    estimatedPickup: '15-20 min',
    items: [
      { id: 1, name: 'Cherry Vanilla Coke', quantity: 2, price: 2.49 },
      { id: 2, name: 'Strawberry Sprite', quantity: 1, price: 2.49 }
    ],
    vendor: {
      name: 'CityCenter Freestyle',
      image: '/api/placeholder/80/80',
      address: '233 Main Street'
    },
    statusUpdates: [
      { time: '10:15 AM', status: 'Order Placed', completed: true },
      { time: '10:17 AM', status: 'Vendor Confirmed', completed: true },
      { time: '10:25 AM', status: 'Preparing', completed: false },
      { time: '10:35 AM', status: 'Ready for Pickup', completed: false }
    ]
  };
  
  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="bg-blue-600 text-white p-4">
        <div className="flex items-center">
          <button onClick={() => navigateTo('home')} className="text-white">
            <ArrowLeft size={24} />
          </button>
          <h1 className="text-xl font-bold ml-4">Order Status</h1>
        </div>
        <p className="mt-1">Order #{order.id}</p>
      </div>
      
      {/* Status card */}
      <div className="p-4">
        <div className="bg-white rounded-lg shadow p-4">
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-xl font-bold text-blue-600">{order.status}</h2>
              <p className="text-gray-500 flex items-center mt-1">
                <Clock size={16} className="mr-1" />
                Estimated pickup in {order.estimatedPickup}
              </p>
            </div>
            <img 
              src="/api/placeholder/100/100" 
              alt="Delivery" 
              className="w-20 h-20" 
            />
          </div>
        </div>
      </div>
      
      {/* Status timeline */}
      <div className="px-4 mb-4">
        <h3 className="font-semibold mb-3">Order Updates</h3>
        <div className="bg-white rounded-lg shadow p-4">
          {order.statusUpdates.map((update, index) => (
            <div key={index} className="flex mb-4 last:mb-0">
              <div className="mr-3 flex flex-col items-center">
                <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                  update.completed ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-400'
                }`}>
                  {update.completed ? '‚úì' : ''}
                </div>
                {index < order.statusUpdates.length - 1 && (
                  <div className={`w-0.5 h-full ${
                    update.completed ? 'bg-blue-600' : 'bg-gray-200'
                  }`}></div>
                )}
              </div>
              <div className="flex-1">
                <p className="font-medium">{update.status}</p>
                <p className="text-sm text-gray-500">{update.time}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Order details */}
      <div className="px-4 mb-4">
        <h3 className="font-semibold mb-3">Order Details</h3>
        <div className="bg-white rounded-lg shadow p-4">
          <div className="flex items-center mb-4">
            <img 
              src={order.vendor.image} 
              alt={order.vendor.name} 
              className="w-12 h-12 rounded-full"
            />
            <div className="ml-3">
              <h4 className="font-semibold">{order.vendor.name}</h4>
              <p className="text-sm text-gray-500">{order.vendor.address}</p>
            </div>
          </div>
          
          <div className="border-t border-gray-100 pt-3 mb-3">
            {order.items.map(item => (
              <div key={item.id} className="flex justify-between mb-2">
                <span>{item.quantity}x {item.name}</span>
                <span>${(item.price * item.quantity).toFixed(2)}</span>
              </div>
            ))}
          </div>
          
          <div className="border-t border-gray-100 pt-3">
            <div className="flex justify-between mb-1">
              <span className="text-gray-500">Subtotal</span>
              <span>${
                order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2)
              }</span>
            </div>
            <div className="flex justify-between mb-1">
              <span className="text-gray-500">Delivery Fee</span>
              <span>$1.99</span>
            </div>
            <div className="flex justify-between mb-1">
              <span className="text-gray-500">Tax</span>
              <span>$1.57</span>
            </div>
            <div className="flex justify-between font-bold mt-2">
              <span>Total</span>
              <span>$22.03</span>
            </div>
          </div>
        </div>
      </div>
      
      {/* Pickup Location */}
      <div className="px-4 mb-6">
        <h3 className="font-semibold mb-3">Pickup Location</h3>
        <div className="bg-white rounded-lg shadow p-4">
          <div className="flex items-start">
            <MapPin size={20} className="text-blue-600 mt-1" />
            <div className="ml-2">
              <p className="font-medium">{order.vendor.name}</p>
              <p className="text-sm text-gray-500">{order.vendor.address}</p>
              <button className="text-blue-600 text-sm mt-2">Get Directions</button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Support button */}
      <div className="px-4 mt-auto mb-6">
        <button className="w-full border border-blue-600 text-blue-600 py-3 rounded-lg font-bold">
          Contact Support
        </button>
      </div>
    </div>
  );
};

export default ThrstyApp;
